on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
      repo:
        required: true
        type: string
      repo-prefix:
        required: true
        type: string
      dockerfile:
        required: false
        type: string
        default: dockerfile
      context:
        required: false
        type: string
        default: .
      platforms:
        description: comma seperated list of build platforms e.g. '["linux/amd64,linux/arm64"]'
        required: false
        type: string
        default: '["linux/amd64"]'
      src-filters:
        description: JSON object of files or directories that will conditionally determine if running docker build is necessary
        required: false
        type: string
        default: '{"docker":["dockerfile.api"]}'




jobs:
  Changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
        
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: ${{ fromJSON( inputs.src-filters ) }}
              
  Build-deploy-ecr-images:
    name: 'Build/Deploy ECR images'
    runs-on: ubuntu-latest
    needs: Changes
    if: ${{ needs.changes.outputs.docker == 'true' }}
    environment: ${{ inputs.environment }}
    strategy:
      fail-fast: true
      matrix:
        platform: ${{ fromJSON( inputs.platforms ) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
        
    - name: Download doppler
      uses: dopplerhq/cli-action@v2

    - name: Download doppler secrets to .env file
      run: |
        doppler -p chat-stat -c dev secrets download --no-file --format env > .env
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOYER_ROLE }}
        aws-region: ${{secrets.AWS_DEFAULT_REGION}}
        role-duration-seconds: 1200
            
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
            
    - name: Create Unique image tag
      id: vars
      run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Build and push
      uses: docker/build-push-action@v4
      env:
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        platforms: ${{ matrix.platform }}
        install: true
        push: true
        tags: |
          ${{env.ECR_REGISTRY}}/${{inputs.repo-prefix}}-${{inputs.repo}}:latest
          ${{env.ECR_REGISTRY}}/${{inputs.repo-prefix}}-${{inputs.repo}}:${{env.SHORT_SHA}}

