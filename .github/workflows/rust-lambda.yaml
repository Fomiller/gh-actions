on:
  workflow_call:
    inputs:
      artifacts_dir:
        required: true
        type: string
          
      lambda_dir:
        required: true
        type: string
          
      lambda_output:
        required: true
        type: string
          
      rust_version:
        required: false
        type: string
        default: stable
          
      src-filters:
        description: JSON object of files or directories that will conditionally determine if running docker build is necessary
        required: false
        type: string
        default: |
          lambda: 'infra/modules/aws/lambda/**'
          
jobs:
  Changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      lambda: ${{ steps.filter.outputs.lambda }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
        
    - uses: dorny/paths-filter@v3
      id: filter
      with: 
        base: ${{ github.ref }}
        filters: ${{ inputs.src-filters }}
          
  Build-Rust-Lambda:
    needs: Changes
    if: ${{ needs.changes.outputs.lambda == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.rust_version }}
          profile: minimal
          override: true

      - name: Install Zig toolchain
        uses: korandoru/setup-zig@v1
        with:
          zig-version: 0.10.0

      - name: Install Cargo Lambda
        uses: jaxxstorm/action-install-gh-release@v1.9.0
        with:
          repo: cargo-lambda/cargo-lambda
          platform: linux
          arch: x86_64
            
         
      - name: Cargo Cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ inputs.lambda_dir }}/target
          key: ${{ format('cargo-build-cache-{0}', hashFiles(format('{0}/Cargo.toml', inputs.lambda_dir))) }}

      - name: Build Binary
        run: |
          cargo lambda build \
          --arm64 \
          --release \
          --output-format zip \
          --manifest-path ${{ inputs.lambda_dir }}/Cargo.toml \
          --lambda-dir ${{ inputs.lambda_output }}

      - name: Upload Artifacts
        id: cache
        uses: actions/upload-artifact@v4
        with:
          name: lambdas
          path: ${{ inputs.artifacts_dir }}
